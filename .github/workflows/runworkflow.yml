name: Deploy Infra, Test API

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      tf_actions_working_dir: './terraform' # Set the path to your Terraform files

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Initialize Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Apply Terraform Changes
        id: apply
        run: |
          if [ "${{ needs.terraform.outputs.plan.outcome }}" == "success" ]; then
            terraform apply -auto-approve
          else
            echo "Skipping Terraform apply due to plan failure."
          fi

      - name: Clean Up on Failure
        if: failure()
        run: |
          echo "Terraform apply failed, destroying infrastructure..."
          terraform destroy -auto-approve

  get-s3-bucket:
    name: Get S3 Bucket Name
    runs-on: ubuntu-latest
    needs: terraform
    outputs:
      S3_BUCKET: ${{ needs.terraform.outputs.apply.outputs.S3_BUCKET }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ needs.terraform.outputs.apply.outputs.CLOUDFRONT_DISTRIBUTION_ID }}
    steps:
      - name: Get S3 Bucket Name
        id: get-s3-bucket
        run: |
          S3_BUCKET=$(terraform output s3_bucket_name)
          CLOUDFRONT_DISTRIBUTION_ID=$(terraform output cloudfront_distribution_id)
          echo "::set-output name=S3_BUCKET::$S3_BUCKET"
          echo "::set-output name=CLOUDFRONT_DISTRIBUTION_ID::$CLOUDFRONT_DISTRIBUTION_ID"

  update-placeholders:
    name: Update Placeholders
    runs-on: ubuntu-latest
    needs: [terraform, get-s3-bucket]
    steps:
      - uses: actions/checkout@v3

      - name: Update Placeholders
        run: |
          # Replace placeholders in Cypress test file
          sed -i "s|THEAPIPLEASEREPLACE|$(terraform output api_gateway_invoke_url)|g" cypress/integration/test.spec.js

          # Replace placeholders in HTML file
          sed -i "s|THEAPIPLEASEREPLACE|$(terraform output api_gateway_invoke_url)|g" resume-site/index.html

  job-sync-website:
    name: Sync website files to S3 bucket
    runs-on: ubuntu-latest
    needs: update-placeholders
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --source=resume-site --delete --exclude '.git*/*'
        env:
          AWS_S3_BUCKET: ${{ needs.get-s3-bucket.outputs.S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  invalidate-cache:
    name: Invalidate CloudFront Cache
    runs-on: ubuntu-latest
    needs: job-sync-website
    steps:
      - name: Invalidate CloudFront Cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ needs.get-s3-bucket.outputs.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: "/*"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

  job-cypress:
    name: Cypress Tests
    runs-on: ubuntu-latest
    needs: invalidate-cache
    container: cypress/included:9.5.0
    steps:
      - uses: actions/checkout@v3

      - name: Cypress run
        run: cypress run